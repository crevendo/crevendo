// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/message/session.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SessionCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionCreateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionCreateMessageMultiError, or nil if none found.
func (m *SessionCreateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionCreateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SessionCreateMessageMultiError(errors)
	}

	return nil
}

// SessionCreateMessageMultiError is an error wrapping multiple validation
// errors returned by SessionCreateMessage.ValidateAll() if the designated
// constraints aren't met.
type SessionCreateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionCreateMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionCreateMessageMultiError) AllErrors() []error { return m }

// SessionCreateMessageValidationError is the validation error returned by
// SessionCreateMessage.Validate if the designated constraints aren't met.
type SessionCreateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionCreateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionCreateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionCreateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionCreateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionCreateMessageValidationError) ErrorName() string {
	return "SessionCreateMessageValidationError"
}

// Error satisfies the builtin error interface
func (e SessionCreateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionCreateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionCreateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionCreateMessageValidationError{}

// Validate checks the field values on SessionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionCreateResponseMultiError, or nil if none found.
func (m *SessionCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionCreateResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionCreateResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionCreateResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionCreateResponseMultiError(errors)
	}

	return nil
}

// SessionCreateResponseMultiError is an error wrapping multiple validation
// errors returned by SessionCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type SessionCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionCreateResponseMultiError) AllErrors() []error { return m }

// SessionCreateResponseValidationError is the validation error returned by
// SessionCreateResponse.Validate if the designated constraints aren't met.
type SessionCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionCreateResponseValidationError) ErrorName() string {
	return "SessionCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionCreateResponseValidationError{}

// Validate checks the field values on SessionGetMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SessionGetMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionGetMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionGetMessageMultiError, or nil if none found.
func (m *SessionGetMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionGetMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SessionGetMessageMultiError(errors)
	}

	return nil
}

// SessionGetMessageMultiError is an error wrapping multiple validation errors
// returned by SessionGetMessage.ValidateAll() if the designated constraints
// aren't met.
type SessionGetMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionGetMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionGetMessageMultiError) AllErrors() []error { return m }

// SessionGetMessageValidationError is the validation error returned by
// SessionGetMessage.Validate if the designated constraints aren't met.
type SessionGetMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionGetMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionGetMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionGetMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionGetMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionGetMessageValidationError) ErrorName() string {
	return "SessionGetMessageValidationError"
}

// Error satisfies the builtin error interface
func (e SessionGetMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionGetMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionGetMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionGetMessageValidationError{}

// Validate checks the field values on SessionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SessionGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionGetResponseMultiError, or nil if none found.
func (m *SessionGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionGetResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionGetResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionGetResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SessionGetResponseMultiError(errors)
	}

	return nil
}

// SessionGetResponseMultiError is an error wrapping multiple validation errors
// returned by SessionGetResponse.ValidateAll() if the designated constraints
// aren't met.
type SessionGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionGetResponseMultiError) AllErrors() []error { return m }

// SessionGetResponseValidationError is the validation error returned by
// SessionGetResponse.Validate if the designated constraints aren't met.
type SessionGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionGetResponseValidationError) ErrorName() string {
	return "SessionGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SessionGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionGetResponseValidationError{}
