// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/message/payment.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PaymentMethodDeleteMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodDeleteMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodDeleteMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodDeleteMessageMultiError, or nil if none found.
func (m *PaymentMethodDeleteMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodDeleteMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentMethodId

	if len(errors) > 0 {
		return PaymentMethodDeleteMessageMultiError(errors)
	}

	return nil
}

// PaymentMethodDeleteMessageMultiError is an error wrapping multiple
// validation errors returned by PaymentMethodDeleteMessage.ValidateAll() if
// the designated constraints aren't met.
type PaymentMethodDeleteMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodDeleteMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodDeleteMessageMultiError) AllErrors() []error { return m }

// PaymentMethodDeleteMessageValidationError is the validation error returned
// by PaymentMethodDeleteMessage.Validate if the designated constraints aren't met.
type PaymentMethodDeleteMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodDeleteMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodDeleteMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodDeleteMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodDeleteMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodDeleteMessageValidationError) ErrorName() string {
	return "PaymentMethodDeleteMessageValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodDeleteMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodDeleteMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodDeleteMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodDeleteMessageValidationError{}

// Validate checks the field values on PaymentMethodDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodDeleteResponseMultiError, or nil if none found.
func (m *PaymentMethodDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaymentMethodDeleteResponseMultiError(errors)
	}

	return nil
}

// PaymentMethodDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by PaymentMethodDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type PaymentMethodDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodDeleteResponseMultiError) AllErrors() []error { return m }

// PaymentMethodDeleteResponseValidationError is the validation error returned
// by PaymentMethodDeleteResponse.Validate if the designated constraints
// aren't met.
type PaymentMethodDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodDeleteResponseValidationError) ErrorName() string {
	return "PaymentMethodDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodDeleteResponseValidationError{}

// Validate checks the field values on PaymentMethodListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodListMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodListMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodListMessageMultiError, or nil if none found.
func (m *PaymentMethodListMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodListMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return PaymentMethodListMessageMultiError(errors)
	}

	return nil
}

// PaymentMethodListMessageMultiError is an error wrapping multiple validation
// errors returned by PaymentMethodListMessage.ValidateAll() if the designated
// constraints aren't met.
type PaymentMethodListMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodListMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodListMessageMultiError) AllErrors() []error { return m }

// PaymentMethodListMessageValidationError is the validation error returned by
// PaymentMethodListMessage.Validate if the designated constraints aren't met.
type PaymentMethodListMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodListMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodListMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodListMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodListMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodListMessageValidationError) ErrorName() string {
	return "PaymentMethodListMessageValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodListMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodListMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodListMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodListMessageValidationError{}

// Validate checks the field values on PaymentMethodListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodListResponseMultiError, or nil if none found.
func (m *PaymentMethodListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaymentMethodListResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PaymentMethodListResponseMultiError(errors)
	}

	return nil
}

// PaymentMethodListResponseMultiError is an error wrapping multiple validation
// errors returned by PaymentMethodListResponse.ValidateAll() if the
// designated constraints aren't met.
type PaymentMethodListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodListResponseMultiError) AllErrors() []error { return m }

// PaymentMethodListResponseValidationError is the validation error returned by
// PaymentMethodListResponse.Validate if the designated constraints aren't met.
type PaymentMethodListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodListResponseValidationError) ErrorName() string {
	return "PaymentMethodListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodListResponseValidationError{}
