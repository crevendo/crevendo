// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/message/order.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateMessageMultiError, or nil if none found.
func (m *OrderCreateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for CartId

	// no validation rules for Gateway

	// no validation rules for AddressId

	// no validation rules for ShipmentId

	// no validation rules for MethodId

	// no validation rules for Total

	if m.Cvv != nil {
		// no validation rules for Cvv
	}

	if len(errors) > 0 {
		return OrderCreateMessageMultiError(errors)
	}

	return nil
}

// OrderCreateMessageMultiError is an error wrapping multiple validation errors
// returned by OrderCreateMessage.ValidateAll() if the designated constraints
// aren't met.
type OrderCreateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateMessageMultiError) AllErrors() []error { return m }

// OrderCreateMessageValidationError is the validation error returned by
// OrderCreateMessage.Validate if the designated constraints aren't met.
type OrderCreateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateMessageValidationError) ErrorName() string {
	return "OrderCreateMessageValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCreateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateMessageValidationError{}

// Validate checks the field values on OrderCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderCreateResponseMultiError, or nil if none found.
func (m *OrderCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderCreateResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderCreateResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderCreateResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderCreateResponseMultiError(errors)
	}

	return nil
}

// OrderCreateResponseMultiError is an error wrapping multiple validation
// errors returned by OrderCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderCreateResponseMultiError) AllErrors() []error { return m }

// OrderCreateResponseValidationError is the validation error returned by
// OrderCreateResponse.Validate if the designated constraints aren't met.
type OrderCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderCreateResponseValidationError) ErrorName() string {
	return "OrderCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderCreateResponseValidationError{}

// Validate checks the field values on OrderGetMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderGetMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetMessageMultiError, or nil if none found.
func (m *OrderGetMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return OrderGetMessageMultiError(errors)
	}

	return nil
}

// OrderGetMessageMultiError is an error wrapping multiple validation errors
// returned by OrderGetMessage.ValidateAll() if the designated constraints
// aren't met.
type OrderGetMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetMessageMultiError) AllErrors() []error { return m }

// OrderGetMessageValidationError is the validation error returned by
// OrderGetMessage.Validate if the designated constraints aren't met.
type OrderGetMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetMessageValidationError) ErrorName() string { return "OrderGetMessageValidationError" }

// Error satisfies the builtin error interface
func (e OrderGetMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetMessageValidationError{}

// Validate checks the field values on OrderGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderGetResponseMultiError, or nil if none found.
func (m *OrderGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderGetResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderGetResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderGetResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderGetResponseMultiError(errors)
	}

	return nil
}

// OrderGetResponseMultiError is an error wrapping multiple validation errors
// returned by OrderGetResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderGetResponseMultiError) AllErrors() []error { return m }

// OrderGetResponseValidationError is the validation error returned by
// OrderGetResponse.Validate if the designated constraints aren't met.
type OrderGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderGetResponseValidationError) ErrorName() string { return "OrderGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderGetResponseValidationError{}

// Validate checks the field values on OrderListMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListMessageMultiError, or nil if none found.
func (m *OrderListMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PaymentId != nil {
		// no validation rules for PaymentId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if len(errors) > 0 {
		return OrderListMessageMultiError(errors)
	}

	return nil
}

// OrderListMessageMultiError is an error wrapping multiple validation errors
// returned by OrderListMessage.ValidateAll() if the designated constraints
// aren't met.
type OrderListMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListMessageMultiError) AllErrors() []error { return m }

// OrderListMessageValidationError is the validation error returned by
// OrderListMessage.Validate if the designated constraints aren't met.
type OrderListMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListMessageValidationError) ErrorName() string { return "OrderListMessageValidationError" }

// Error satisfies the builtin error interface
func (e OrderListMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListMessageValidationError{}

// Validate checks the field values on OrderListResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderListResponseMultiError, or nil if none found.
func (m *OrderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderListResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderListResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderListResponseMultiError(errors)
	}

	return nil
}

// OrderListResponseMultiError is an error wrapping multiple validation errors
// returned by OrderListResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListResponseMultiError) AllErrors() []error { return m }

// OrderListResponseValidationError is the validation error returned by
// OrderListResponse.Validate if the designated constraints aren't met.
type OrderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListResponseValidationError) ErrorName() string {
	return "OrderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListResponseValidationError{}

// Validate checks the field values on OrderUpdateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderUpdateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderUpdateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderUpdateMessageMultiError, or nil if none found.
func (m *OrderUpdateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderUpdateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderUpdateMessageMultiError(errors)
	}

	return nil
}

// OrderUpdateMessageMultiError is an error wrapping multiple validation errors
// returned by OrderUpdateMessage.ValidateAll() if the designated constraints
// aren't met.
type OrderUpdateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderUpdateMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderUpdateMessageMultiError) AllErrors() []error { return m }

// OrderUpdateMessageValidationError is the validation error returned by
// OrderUpdateMessage.Validate if the designated constraints aren't met.
type OrderUpdateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderUpdateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderUpdateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderUpdateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderUpdateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderUpdateMessageValidationError) ErrorName() string {
	return "OrderUpdateMessageValidationError"
}

// Error satisfies the builtin error interface
func (e OrderUpdateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderUpdateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderUpdateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderUpdateMessageValidationError{}

// Validate checks the field values on OrderUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderUpdateResponseMultiError, or nil if none found.
func (m *OrderUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderUpdateResponseMultiError(errors)
	}

	return nil
}

// OrderUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by OrderUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderUpdateResponseMultiError) AllErrors() []error { return m }

// OrderUpdateResponseValidationError is the validation error returned by
// OrderUpdateResponse.Validate if the designated constraints aren't met.
type OrderUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderUpdateResponseValidationError) ErrorName() string {
	return "OrderUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderUpdateResponseValidationError{}

// Validate checks the field values on OrderStatusListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderStatusListMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderStatusListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderStatusListMessageMultiError, or nil if none found.
func (m *OrderStatusListMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderStatusListMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderStatusListMessageMultiError(errors)
	}

	return nil
}

// OrderStatusListMessageMultiError is an error wrapping multiple validation
// errors returned by OrderStatusListMessage.ValidateAll() if the designated
// constraints aren't met.
type OrderStatusListMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderStatusListMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderStatusListMessageMultiError) AllErrors() []error { return m }

// OrderStatusListMessageValidationError is the validation error returned by
// OrderStatusListMessage.Validate if the designated constraints aren't met.
type OrderStatusListMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderStatusListMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderStatusListMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderStatusListMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderStatusListMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderStatusListMessageValidationError) ErrorName() string {
	return "OrderStatusListMessageValidationError"
}

// Error satisfies the builtin error interface
func (e OrderStatusListMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderStatusListMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderStatusListMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderStatusListMessageValidationError{}

// Validate checks the field values on OrderStatusListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderStatusListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderStatusListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderStatusListResponseMultiError, or nil if none found.
func (m *OrderStatusListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderStatusListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderStatusListResponseValidationError{
						field:  fmt.Sprintf("OrderStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderStatusListResponseValidationError{
						field:  fmt.Sprintf("OrderStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderStatusListResponseValidationError{
					field:  fmt.Sprintf("OrderStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderStatusListResponseMultiError(errors)
	}

	return nil
}

// OrderStatusListResponseMultiError is an error wrapping multiple validation
// errors returned by OrderStatusListResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderStatusListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderStatusListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderStatusListResponseMultiError) AllErrors() []error { return m }

// OrderStatusListResponseValidationError is the validation error returned by
// OrderStatusListResponse.Validate if the designated constraints aren't met.
type OrderStatusListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderStatusListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderStatusListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderStatusListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderStatusListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderStatusListResponseValidationError) ErrorName() string {
	return "OrderStatusListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderStatusListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderStatusListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderStatusListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderStatusListResponseValidationError{}
