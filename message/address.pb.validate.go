// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/message/address.proto

package message

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddressGetMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddressGetMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressGetMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressGetMessageMultiError, or nil if none found.
func (m *AddressGetMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressGetMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddressGetMessageMultiError(errors)
	}

	return nil
}

// AddressGetMessageMultiError is an error wrapping multiple validation errors
// returned by AddressGetMessage.ValidateAll() if the designated constraints
// aren't met.
type AddressGetMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressGetMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressGetMessageMultiError) AllErrors() []error { return m }

// AddressGetMessageValidationError is the validation error returned by
// AddressGetMessage.Validate if the designated constraints aren't met.
type AddressGetMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressGetMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressGetMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressGetMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressGetMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressGetMessageValidationError) ErrorName() string {
	return "AddressGetMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AddressGetMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressGetMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressGetMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressGetMessageValidationError{}

// Validate checks the field values on AddressGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressGetResponseMultiError, or nil if none found.
func (m *AddressGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressGetResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressGetResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressGetResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressGetResponseMultiError(errors)
	}

	return nil
}

// AddressGetResponseMultiError is an error wrapping multiple validation errors
// returned by AddressGetResponse.ValidateAll() if the designated constraints
// aren't met.
type AddressGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressGetResponseMultiError) AllErrors() []error { return m }

// AddressGetResponseValidationError is the validation error returned by
// AddressGetResponse.Validate if the designated constraints aren't met.
type AddressGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressGetResponseValidationError) ErrorName() string {
	return "AddressGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressGetResponseValidationError{}

// Validate checks the field values on AddressDeleteMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressDeleteMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressDeleteMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressDeleteMessageMultiError, or nil if none found.
func (m *AddressDeleteMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressDeleteMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddressDeleteMessageMultiError(errors)
	}

	return nil
}

// AddressDeleteMessageMultiError is an error wrapping multiple validation
// errors returned by AddressDeleteMessage.ValidateAll() if the designated
// constraints aren't met.
type AddressDeleteMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressDeleteMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressDeleteMessageMultiError) AllErrors() []error { return m }

// AddressDeleteMessageValidationError is the validation error returned by
// AddressDeleteMessage.Validate if the designated constraints aren't met.
type AddressDeleteMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDeleteMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDeleteMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDeleteMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDeleteMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDeleteMessageValidationError) ErrorName() string {
	return "AddressDeleteMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AddressDeleteMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressDeleteMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDeleteMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDeleteMessageValidationError{}

// Validate checks the field values on AddressDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressDeleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressDeleteResponseMultiError, or nil if none found.
func (m *AddressDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddressDeleteResponseMultiError(errors)
	}

	return nil
}

// AddressDeleteResponseMultiError is an error wrapping multiple validation
// errors returned by AddressDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressDeleteResponseMultiError) AllErrors() []error { return m }

// AddressDeleteResponseValidationError is the validation error returned by
// AddressDeleteResponse.Validate if the designated constraints aren't met.
type AddressDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressDeleteResponseValidationError) ErrorName() string {
	return "AddressDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressDeleteResponseValidationError{}

// Validate checks the field values on AddressListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressListMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressListMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressListMessageMultiError, or nil if none found.
func (m *AddressListMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressListMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddressListMessageMultiError(errors)
	}

	return nil
}

// AddressListMessageMultiError is an error wrapping multiple validation errors
// returned by AddressListMessage.ValidateAll() if the designated constraints
// aren't met.
type AddressListMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressListMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressListMessageMultiError) AllErrors() []error { return m }

// AddressListMessageValidationError is the validation error returned by
// AddressListMessage.Validate if the designated constraints aren't met.
type AddressListMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressListMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressListMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressListMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressListMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressListMessageValidationError) ErrorName() string {
	return "AddressListMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AddressListMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressListMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressListMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressListMessageValidationError{}

// Validate checks the field values on AddressListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressListResponseMultiError, or nil if none found.
func (m *AddressListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAddress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressListResponseValidationError{
						field:  fmt.Sprintf("Address[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressListResponseValidationError{
						field:  fmt.Sprintf("Address[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressListResponseValidationError{
					field:  fmt.Sprintf("Address[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressListResponseMultiError(errors)
	}

	return nil
}

// AddressListResponseMultiError is an error wrapping multiple validation
// errors returned by AddressListResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressListResponseMultiError) AllErrors() []error { return m }

// AddressListResponseValidationError is the validation error returned by
// AddressListResponse.Validate if the designated constraints aren't met.
type AddressListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressListResponseValidationError) ErrorName() string {
	return "AddressListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressListResponseValidationError{}

// Validate checks the field values on AddressCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressCreateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressCreateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressCreateMessageMultiError, or nil if none found.
func (m *AddressCreateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressCreateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Address

	// no validation rules for PostalCode

	// no validation rules for Phone

	// no validation rules for Notes

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressCreateMessageValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressCreateMessageValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressCreateMessageValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressCreateMessageMultiError(errors)
	}

	return nil
}

// AddressCreateMessageMultiError is an error wrapping multiple validation
// errors returned by AddressCreateMessage.ValidateAll() if the designated
// constraints aren't met.
type AddressCreateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressCreateMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressCreateMessageMultiError) AllErrors() []error { return m }

// AddressCreateMessageValidationError is the validation error returned by
// AddressCreateMessage.Validate if the designated constraints aren't met.
type AddressCreateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressCreateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressCreateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressCreateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressCreateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressCreateMessageValidationError) ErrorName() string {
	return "AddressCreateMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AddressCreateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressCreateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressCreateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressCreateMessageValidationError{}

// Validate checks the field values on AddressCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressCreateResponseMultiError, or nil if none found.
func (m *AddressCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddressCreateResponseMultiError(errors)
	}

	return nil
}

// AddressCreateResponseMultiError is an error wrapping multiple validation
// errors returned by AddressCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressCreateResponseMultiError) AllErrors() []error { return m }

// AddressCreateResponseValidationError is the validation error returned by
// AddressCreateResponse.Validate if the designated constraints aren't met.
type AddressCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressCreateResponseValidationError) ErrorName() string {
	return "AddressCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressCreateResponseValidationError{}

// Validate checks the field values on AddressUpdateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressUpdateMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressUpdateMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressUpdateMessageMultiError, or nil if none found.
func (m *AddressUpdateMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressUpdateMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Address

	// no validation rules for PostalCode

	// no validation rules for Phone

	// no validation rules for Notes

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressUpdateMessageValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressUpdateMessageValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressUpdateMessageValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressUpdateMessageMultiError(errors)
	}

	return nil
}

// AddressUpdateMessageMultiError is an error wrapping multiple validation
// errors returned by AddressUpdateMessage.ValidateAll() if the designated
// constraints aren't met.
type AddressUpdateMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressUpdateMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressUpdateMessageMultiError) AllErrors() []error { return m }

// AddressUpdateMessageValidationError is the validation error returned by
// AddressUpdateMessage.Validate if the designated constraints aren't met.
type AddressUpdateMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressUpdateMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressUpdateMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressUpdateMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressUpdateMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressUpdateMessageValidationError) ErrorName() string {
	return "AddressUpdateMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AddressUpdateMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressUpdateMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressUpdateMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressUpdateMessageValidationError{}

// Validate checks the field values on AddressUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddressUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressUpdateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddressUpdateResponseMultiError, or nil if none found.
func (m *AddressUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressUpdateResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressUpdateResponseValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressUpdateResponseValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressUpdateResponseMultiError(errors)
	}

	return nil
}

// AddressUpdateResponseMultiError is an error wrapping multiple validation
// errors returned by AddressUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type AddressUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressUpdateResponseMultiError) AllErrors() []error { return m }

// AddressUpdateResponseValidationError is the validation error returned by
// AddressUpdateResponse.Validate if the designated constraints aren't met.
type AddressUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressUpdateResponseValidationError) ErrorName() string {
	return "AddressUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddressUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressUpdateResponseValidationError{}
