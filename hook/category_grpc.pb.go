// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hook/category.proto

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CategoryHooks_CategoryList_FullMethodName = "/CategoryHooks/CategoryList"
	CategoryHooks_CategoryGet_FullMethodName  = "/CategoryHooks/CategoryGet"
)

// CategoryHooksClient is the client API for CategoryHooks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryHooksClient interface {
	CategoryList(ctx context.Context, in *CategoryListHookParams, opts ...grpc.CallOption) (*CategoryListHookParams, error)
	CategoryGet(ctx context.Context, in *CategoryGetHookParams, opts ...grpc.CallOption) (*CategoryGetHookParams, error)
}

type categoryHooksClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryHooksClient(cc grpc.ClientConnInterface) CategoryHooksClient {
	return &categoryHooksClient{cc}
}

func (c *categoryHooksClient) CategoryList(ctx context.Context, in *CategoryListHookParams, opts ...grpc.CallOption) (*CategoryListHookParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryListHookParams)
	err := c.cc.Invoke(ctx, CategoryHooks_CategoryList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryHooksClient) CategoryGet(ctx context.Context, in *CategoryGetHookParams, opts ...grpc.CallOption) (*CategoryGetHookParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CategoryGetHookParams)
	err := c.cc.Invoke(ctx, CategoryHooks_CategoryGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryHooksServer is the server API for CategoryHooks service.
// All implementations must embed UnimplementedCategoryHooksServer
// for forward compatibility.
type CategoryHooksServer interface {
	CategoryList(context.Context, *CategoryListHookParams) (*CategoryListHookParams, error)
	CategoryGet(context.Context, *CategoryGetHookParams) (*CategoryGetHookParams, error)
	mustEmbedUnimplementedCategoryHooksServer()
}

// UnimplementedCategoryHooksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCategoryHooksServer struct{}

func (UnimplementedCategoryHooksServer) CategoryList(context.Context, *CategoryListHookParams) (*CategoryListHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryList not implemented")
}
func (UnimplementedCategoryHooksServer) CategoryGet(context.Context, *CategoryGetHookParams) (*CategoryGetHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryGet not implemented")
}
func (UnimplementedCategoryHooksServer) mustEmbedUnimplementedCategoryHooksServer() {}
func (UnimplementedCategoryHooksServer) testEmbeddedByValue()                       {}

// UnsafeCategoryHooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryHooksServer will
// result in compilation errors.
type UnsafeCategoryHooksServer interface {
	mustEmbedUnimplementedCategoryHooksServer()
}

func RegisterCategoryHooksServer(s grpc.ServiceRegistrar, srv CategoryHooksServer) {
	// If the following call pancis, it indicates UnimplementedCategoryHooksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CategoryHooks_ServiceDesc, srv)
}

func _CategoryHooks_CategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryHooksServer).CategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryHooks_CategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryHooksServer).CategoryList(ctx, req.(*CategoryListHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _CategoryHooks_CategoryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryGetHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryHooksServer).CategoryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CategoryHooks_CategoryGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryHooksServer).CategoryGet(ctx, req.(*CategoryGetHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CategoryHooks_ServiceDesc is the grpc.ServiceDesc for CategoryHooks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryHooks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CategoryHooks",
	HandlerType: (*CategoryHooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CategoryList",
			Handler:    _CategoryHooks_CategoryList_Handler,
		},
		{
			MethodName: "CategoryGet",
			Handler:    _CategoryHooks_CategoryGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hook/category.proto",
}
