// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/hook/field.proto

package hook

import (
	context "context"
	message "github.com/crevendo/crevendo/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FieldHooks_AddressFieldList_FullMethodName = "/FieldHooks/AddressFieldList"
	FieldHooks_UserFieldList_FullMethodName    = "/FieldHooks/UserFieldList"
	FieldHooks_FieldHandle_FullMethodName      = "/FieldHooks/FieldHandle"
)

// FieldHooksClient is the client API for FieldHooks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldHooksClient interface {
	AddressFieldList(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*message.FieldListResponse, error)
	UserFieldList(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*message.FieldListResponse, error)
	FieldHandle(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*FieldHandleHookParams, error)
}

type fieldHooksClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldHooksClient(cc grpc.ClientConnInterface) FieldHooksClient {
	return &fieldHooksClient{cc}
}

func (c *fieldHooksClient) AddressFieldList(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*message.FieldListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(message.FieldListResponse)
	err := c.cc.Invoke(ctx, FieldHooks_AddressFieldList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldHooksClient) UserFieldList(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*message.FieldListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(message.FieldListResponse)
	err := c.cc.Invoke(ctx, FieldHooks_UserFieldList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldHooksClient) FieldHandle(ctx context.Context, in *FieldListHookParams, opts ...grpc.CallOption) (*FieldHandleHookParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FieldHandleHookParams)
	err := c.cc.Invoke(ctx, FieldHooks_FieldHandle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldHooksServer is the server API for FieldHooks service.
// All implementations must embed UnimplementedFieldHooksServer
// for forward compatibility.
type FieldHooksServer interface {
	AddressFieldList(context.Context, *FieldListHookParams) (*message.FieldListResponse, error)
	UserFieldList(context.Context, *FieldListHookParams) (*message.FieldListResponse, error)
	FieldHandle(context.Context, *FieldListHookParams) (*FieldHandleHookParams, error)
	mustEmbedUnimplementedFieldHooksServer()
}

// UnimplementedFieldHooksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFieldHooksServer struct{}

func (UnimplementedFieldHooksServer) AddressFieldList(context.Context, *FieldListHookParams) (*message.FieldListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressFieldList not implemented")
}
func (UnimplementedFieldHooksServer) UserFieldList(context.Context, *FieldListHookParams) (*message.FieldListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFieldList not implemented")
}
func (UnimplementedFieldHooksServer) FieldHandle(context.Context, *FieldListHookParams) (*FieldHandleHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FieldHandle not implemented")
}
func (UnimplementedFieldHooksServer) mustEmbedUnimplementedFieldHooksServer() {}
func (UnimplementedFieldHooksServer) testEmbeddedByValue()                    {}

// UnsafeFieldHooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldHooksServer will
// result in compilation errors.
type UnsafeFieldHooksServer interface {
	mustEmbedUnimplementedFieldHooksServer()
}

func RegisterFieldHooksServer(s grpc.ServiceRegistrar, srv FieldHooksServer) {
	// If the following call pancis, it indicates UnimplementedFieldHooksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FieldHooks_ServiceDesc, srv)
}

func _FieldHooks_AddressFieldList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldListHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldHooksServer).AddressFieldList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldHooks_AddressFieldList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldHooksServer).AddressFieldList(ctx, req.(*FieldListHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldHooks_UserFieldList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldListHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldHooksServer).UserFieldList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldHooks_UserFieldList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldHooksServer).UserFieldList(ctx, req.(*FieldListHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _FieldHooks_FieldHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldListHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldHooksServer).FieldHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FieldHooks_FieldHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldHooksServer).FieldHandle(ctx, req.(*FieldListHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldHooks_ServiceDesc is the grpc.ServiceDesc for FieldHooks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldHooks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FieldHooks",
	HandlerType: (*FieldHooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressFieldList",
			Handler:    _FieldHooks_AddressFieldList_Handler,
		},
		{
			MethodName: "UserFieldList",
			Handler:    _FieldHooks_UserFieldList_Handler,
		},
		{
			MethodName: "FieldHandle",
			Handler:    _FieldHooks_FieldHandle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hook/field.proto",
}
