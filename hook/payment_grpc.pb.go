// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/hook/payment.proto

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentHooksClient is the client API for PaymentHooks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentHooksClient interface {
	MethodList(ctx context.Context, in *PaymentMethodListHookParams, opts ...grpc.CallOption) (*PaymentMethodListHookParams, error)
	MethodDelete(ctx context.Context, in *PaymentMethodDeleteHookParams, opts ...grpc.CallOption) (*PaymentMethodDeleteHookParams, error)
	ProcessPayment(ctx context.Context, in *PaymentProcessHookParams, opts ...grpc.CallOption) (*PaymentProcessHookParams, error)
}

type paymentHooksClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentHooksClient(cc grpc.ClientConnInterface) PaymentHooksClient {
	return &paymentHooksClient{cc}
}

func (c *paymentHooksClient) MethodList(ctx context.Context, in *PaymentMethodListHookParams, opts ...grpc.CallOption) (*PaymentMethodListHookParams, error) {
	out := new(PaymentMethodListHookParams)
	err := c.cc.Invoke(ctx, "/PaymentHooks/MethodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentHooksClient) MethodDelete(ctx context.Context, in *PaymentMethodDeleteHookParams, opts ...grpc.CallOption) (*PaymentMethodDeleteHookParams, error) {
	out := new(PaymentMethodDeleteHookParams)
	err := c.cc.Invoke(ctx, "/PaymentHooks/MethodDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentHooksClient) ProcessPayment(ctx context.Context, in *PaymentProcessHookParams, opts ...grpc.CallOption) (*PaymentProcessHookParams, error) {
	out := new(PaymentProcessHookParams)
	err := c.cc.Invoke(ctx, "/PaymentHooks/ProcessPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentHooksServer is the server API for PaymentHooks service.
// All implementations must embed UnimplementedPaymentHooksServer
// for forward compatibility
type PaymentHooksServer interface {
	MethodList(context.Context, *PaymentMethodListHookParams) (*PaymentMethodListHookParams, error)
	MethodDelete(context.Context, *PaymentMethodDeleteHookParams) (*PaymentMethodDeleteHookParams, error)
	ProcessPayment(context.Context, *PaymentProcessHookParams) (*PaymentProcessHookParams, error)
	mustEmbedUnimplementedPaymentHooksServer()
}

// UnimplementedPaymentHooksServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentHooksServer struct {
}

func (UnimplementedPaymentHooksServer) MethodList(context.Context, *PaymentMethodListHookParams) (*PaymentMethodListHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodList not implemented")
}
func (UnimplementedPaymentHooksServer) MethodDelete(context.Context, *PaymentMethodDeleteHookParams) (*PaymentMethodDeleteHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodDelete not implemented")
}
func (UnimplementedPaymentHooksServer) ProcessPayment(context.Context, *PaymentProcessHookParams) (*PaymentProcessHookParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentHooksServer) mustEmbedUnimplementedPaymentHooksServer() {}

// UnsafePaymentHooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentHooksServer will
// result in compilation errors.
type UnsafePaymentHooksServer interface {
	mustEmbedUnimplementedPaymentHooksServer()
}

func RegisterPaymentHooksServer(s grpc.ServiceRegistrar, srv PaymentHooksServer) {
	s.RegisterService(&PaymentHooks_ServiceDesc, srv)
}

func _PaymentHooks_MethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodListHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentHooksServer).MethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentHooks/MethodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentHooksServer).MethodList(ctx, req.(*PaymentMethodListHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentHooks_MethodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethodDeleteHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentHooksServer).MethodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentHooks/MethodDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentHooksServer).MethodDelete(ctx, req.(*PaymentMethodDeleteHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentHooks_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentProcessHookParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentHooksServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentHooks/ProcessPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentHooksServer).ProcessPayment(ctx, req.(*PaymentProcessHookParams))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentHooks_ServiceDesc is the grpc.ServiceDesc for PaymentHooks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentHooks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentHooks",
	HandlerType: (*PaymentHooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodList",
			Handler:    _PaymentHooks_MethodList_Handler,
		},
		{
			MethodName: "MethodDelete",
			Handler:    _PaymentHooks_MethodDelete_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentHooks_ProcessPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hook/payment.proto",
}
