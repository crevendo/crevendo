// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/service/cache.proto

package grpc

import (
	context "context"
	message "github.com/crevendo/crevendo/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	Clear(ctx context.Context, in *message.CacheCleanRequest, opts ...grpc.CallOption) (*message.CacheCleanResponse, error)
	ClearProduct(ctx context.Context, in *message.CacheProductGenerateRequest, opts ...grpc.CallOption) (*message.CacheProductGenerateResponse, error)
	ClearSearch(ctx context.Context, in *message.CacheSearchGenerateRequest, opts ...grpc.CallOption) (*message.CacheSearchGenerateResponse, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) Clear(ctx context.Context, in *message.CacheCleanRequest, opts ...grpc.CallOption) (*message.CacheCleanResponse, error) {
	out := new(message.CacheCleanResponse)
	err := c.cc.Invoke(ctx, "/CacheService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) ClearProduct(ctx context.Context, in *message.CacheProductGenerateRequest, opts ...grpc.CallOption) (*message.CacheProductGenerateResponse, error) {
	out := new(message.CacheProductGenerateResponse)
	err := c.cc.Invoke(ctx, "/CacheService/ClearProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) ClearSearch(ctx context.Context, in *message.CacheSearchGenerateRequest, opts ...grpc.CallOption) (*message.CacheSearchGenerateResponse, error) {
	out := new(message.CacheSearchGenerateResponse)
	err := c.cc.Invoke(ctx, "/CacheService/ClearSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility
type CacheServiceServer interface {
	Clear(context.Context, *message.CacheCleanRequest) (*message.CacheCleanResponse, error)
	ClearProduct(context.Context, *message.CacheProductGenerateRequest) (*message.CacheProductGenerateResponse, error)
	ClearSearch(context.Context, *message.CacheSearchGenerateRequest) (*message.CacheSearchGenerateResponse, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (UnimplementedCacheServiceServer) Clear(context.Context, *message.CacheCleanRequest) (*message.CacheCleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedCacheServiceServer) ClearProduct(context.Context, *message.CacheProductGenerateRequest) (*message.CacheProductGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearProduct not implemented")
}
func (UnimplementedCacheServiceServer) ClearSearch(context.Context, *message.CacheSearchGenerateRequest) (*message.CacheSearchGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSearch not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CacheCleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).Clear(ctx, req.(*message.CacheCleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_ClearProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CacheProductGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).ClearProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/ClearProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).ClearProduct(ctx, req.(*message.CacheProductGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_ClearSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.CacheSearchGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).ClearSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CacheService/ClearSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).ClearSearch(ctx, req.(*message.CacheSearchGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Clear",
			Handler:    _CacheService_Clear_Handler,
		},
		{
			MethodName: "ClearProduct",
			Handler:    _CacheService_ClearProduct_Handler,
		},
		{
			MethodName: "ClearSearch",
			Handler:    _CacheService_ClearSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cache.proto",
}
