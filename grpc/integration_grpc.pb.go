// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/service/integration.proto

package grpc

import (
	context "context"
	message "github.com/crevendo/crevendo/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	List(ctx context.Context, in *message.IntegrationListMessage, opts ...grpc.CallOption) (*message.IntegrationListResponse, error)
	Get(ctx context.Context, in *message.IntegrationGetMessage, opts ...grpc.CallOption) (*message.IntegrationGetResponse, error)
	Enable(ctx context.Context, in *message.IntegrationEnableMessage, opts ...grpc.CallOption) (*message.IntegrationEnableResponse, error)
	Disable(ctx context.Context, in *message.IntegrationDisableMessage, opts ...grpc.CallOption) (*message.IntegrationDisableResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) List(ctx context.Context, in *message.IntegrationListMessage, opts ...grpc.CallOption) (*message.IntegrationListResponse, error) {
	out := new(message.IntegrationListResponse)
	err := c.cc.Invoke(ctx, "/IntegrationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) Get(ctx context.Context, in *message.IntegrationGetMessage, opts ...grpc.CallOption) (*message.IntegrationGetResponse, error) {
	out := new(message.IntegrationGetResponse)
	err := c.cc.Invoke(ctx, "/IntegrationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) Enable(ctx context.Context, in *message.IntegrationEnableMessage, opts ...grpc.CallOption) (*message.IntegrationEnableResponse, error) {
	out := new(message.IntegrationEnableResponse)
	err := c.cc.Invoke(ctx, "/IntegrationService/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) Disable(ctx context.Context, in *message.IntegrationDisableMessage, opts ...grpc.CallOption) (*message.IntegrationDisableResponse, error) {
	out := new(message.IntegrationDisableResponse)
	err := c.cc.Invoke(ctx, "/IntegrationService/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	List(context.Context, *message.IntegrationListMessage) (*message.IntegrationListResponse, error)
	Get(context.Context, *message.IntegrationGetMessage) (*message.IntegrationGetResponse, error)
	Enable(context.Context, *message.IntegrationEnableMessage) (*message.IntegrationEnableResponse, error)
	Disable(context.Context, *message.IntegrationDisableMessage) (*message.IntegrationDisableResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) List(context.Context, *message.IntegrationListMessage) (*message.IntegrationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntegrationServiceServer) Get(context.Context, *message.IntegrationGetMessage) (*message.IntegrationGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntegrationServiceServer) Enable(context.Context, *message.IntegrationEnableMessage) (*message.IntegrationEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedIntegrationServiceServer) Disable(context.Context, *message.IntegrationDisableMessage) (*message.IntegrationDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.IntegrationListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).List(ctx, req.(*message.IntegrationListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.IntegrationGetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).Get(ctx, req.(*message.IntegrationGetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.IntegrationEnableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationService/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).Enable(ctx, req.(*message.IntegrationEnableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.IntegrationDisableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegrationService/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).Disable(ctx, req.(*message.IntegrationDisableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IntegrationService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IntegrationService_Get_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _IntegrationService_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _IntegrationService_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/integration.proto",
}
