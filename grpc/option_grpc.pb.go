// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/service/option.proto

package grpc

import (
	context "context"
	message "github.com/crevendo/crevendo/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OptionServiceClient is the client API for OptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionServiceClient interface {
	GetByName(ctx context.Context, in *message.OptionGetByNameMessage, opts ...grpc.CallOption) (*message.OptionGetByNameResponse, error)
	List(ctx context.Context, in *message.OptionListMessage, opts ...grpc.CallOption) (*message.OptionListResponse, error)
	Update(ctx context.Context, in *message.OptionUpdateMessage, opts ...grpc.CallOption) (*message.OptionUpdateResponse, error)
}

type optionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionServiceClient(cc grpc.ClientConnInterface) OptionServiceClient {
	return &optionServiceClient{cc}
}

func (c *optionServiceClient) GetByName(ctx context.Context, in *message.OptionGetByNameMessage, opts ...grpc.CallOption) (*message.OptionGetByNameResponse, error) {
	out := new(message.OptionGetByNameResponse)
	err := c.cc.Invoke(ctx, "/OptionService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) List(ctx context.Context, in *message.OptionListMessage, opts ...grpc.CallOption) (*message.OptionListResponse, error) {
	out := new(message.OptionListResponse)
	err := c.cc.Invoke(ctx, "/OptionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionServiceClient) Update(ctx context.Context, in *message.OptionUpdateMessage, opts ...grpc.CallOption) (*message.OptionUpdateResponse, error) {
	out := new(message.OptionUpdateResponse)
	err := c.cc.Invoke(ctx, "/OptionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionServiceServer is the server API for OptionService service.
// All implementations must embed UnimplementedOptionServiceServer
// for forward compatibility
type OptionServiceServer interface {
	GetByName(context.Context, *message.OptionGetByNameMessage) (*message.OptionGetByNameResponse, error)
	List(context.Context, *message.OptionListMessage) (*message.OptionListResponse, error)
	Update(context.Context, *message.OptionUpdateMessage) (*message.OptionUpdateResponse, error)
	mustEmbedUnimplementedOptionServiceServer()
}

// UnimplementedOptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOptionServiceServer struct {
}

func (UnimplementedOptionServiceServer) GetByName(context.Context, *message.OptionGetByNameMessage) (*message.OptionGetByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedOptionServiceServer) List(context.Context, *message.OptionListMessage) (*message.OptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOptionServiceServer) Update(context.Context, *message.OptionUpdateMessage) (*message.OptionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOptionServiceServer) mustEmbedUnimplementedOptionServiceServer() {}

// UnsafeOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionServiceServer will
// result in compilation errors.
type UnsafeOptionServiceServer interface {
	mustEmbedUnimplementedOptionServiceServer()
}

func RegisterOptionServiceServer(s grpc.ServiceRegistrar, srv OptionServiceServer) {
	s.RegisterService(&OptionService_ServiceDesc, srv)
}

func _OptionService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.OptionGetByNameMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OptionService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).GetByName(ctx, req.(*message.OptionGetByNameMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.OptionListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OptionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).List(ctx, req.(*message.OptionListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.OptionUpdateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OptionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionServiceServer).Update(ctx, req.(*message.OptionUpdateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionService_ServiceDesc is the grpc.ServiceDesc for OptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OptionService",
	HandlerType: (*OptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByName",
			Handler:    _OptionService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OptionService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OptionService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/option.proto",
}
