// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/service/payment.proto

package grpc

import (
	context "context"
	message "github.com/crevendo/crevendo/message"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentService_PaymentMethodList_FullMethodName   = "/PaymentService/PaymentMethodList"
	PaymentService_PaymentMethodDelete_FullMethodName = "/PaymentService/PaymentMethodDelete"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	PaymentMethodList(ctx context.Context, in *message.PaymentMethodListMessage, opts ...grpc.CallOption) (*message.PaymentMethodListResponse, error)
	PaymentMethodDelete(ctx context.Context, in *message.PaymentMethodDeleteMessage, opts ...grpc.CallOption) (*message.PaymentMethodDeleteResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) PaymentMethodList(ctx context.Context, in *message.PaymentMethodListMessage, opts ...grpc.CallOption) (*message.PaymentMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(message.PaymentMethodListResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentMethodDelete(ctx context.Context, in *message.PaymentMethodDeleteMessage, opts ...grpc.CallOption) (*message.PaymentMethodDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(message.PaymentMethodDeleteResponse)
	err := c.cc.Invoke(ctx, PaymentService_PaymentMethodDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
type PaymentServiceServer interface {
	PaymentMethodList(context.Context, *message.PaymentMethodListMessage) (*message.PaymentMethodListResponse, error)
	PaymentMethodDelete(context.Context, *message.PaymentMethodDeleteMessage) (*message.PaymentMethodDeleteResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) PaymentMethodList(context.Context, *message.PaymentMethodListMessage) (*message.PaymentMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentMethodList not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentMethodDelete(context.Context, *message.PaymentMethodDeleteMessage) (*message.PaymentMethodDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentMethodDelete not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_PaymentMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.PaymentMethodListMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentMethodList(ctx, req.(*message.PaymentMethodListMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentMethodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.PaymentMethodDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentMethodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_PaymentMethodDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentMethodDelete(ctx, req.(*message.PaymentMethodDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaymentMethodList",
			Handler:    _PaymentService_PaymentMethodList_Handler,
		},
		{
			MethodName: "PaymentMethodDelete",
			Handler:    _PaymentService_PaymentMethodDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/payment.proto",
}
